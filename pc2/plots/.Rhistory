from <<- NULL
for( i in 1:(len-1)){
from <- c( from,c("L"))
}
from
to <<- NULL
attributes <- names(pc2.disc.data)
for(i in 1:(len-1) ){
to <<- c(to, attributes[i]  )
}
to
whitelist.arcs <<- data.frame(from,to)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2\\plots")
#Build a BAN by including arc from Classification Node to every other node
#runHC(debug)
#runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2")
sink("pc2.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
debug = TRUE
preprocess(debug)
#General Bayesian + TAN
runBN(debug)
runTAN(debug)
#General Bayesian Networks
attributes <<- names(pc2.disc.data) #Global variable
whitelist.arcs <<- NULL
#########Score Based
runHC(debug)
runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
# Include an arc from class node to every other node
len <<- length(pc2.disc.data) #Number of attributes
from <<- NULL
for( i in 1:(len-1)){
from <- c( from,c("K"))
}
from
to <<- NULL
attributes <- names(pc2.disc.data)
for(i in 1:(len-1) ){
to <<- c(to, attributes[i]  )
}
to
whitelist.arcs <<- data.frame(from,to)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2\\plots")
#Build a BAN by including arc from Classification Node to every other node
#runHC(debug)
#runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
pc2.temp <- sample(pc2)
pc2.temp
pc2.temp
str( pc2.temp)
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2")
sink("pc2.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
debug = TRUE
preprocess(debug)
#General Bayesian + TAN
runBN(debug)
runTAN(debug)
#General Bayesian Networks
attributes <<- names(pc2.disc.data) #Global variable
whitelist.arcs <<- NULL
#########Score Based
runHC(debug)
runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
# Include an arc from class node to every other node
len <<- length(pc2.disc.data) #Number of attributes
from <<- NULL
for( i in 1:(len-1)){
from <- c( from,c("K"))
}
from
to <<- NULL
attributes <- names(pc2.disc.data)
for(i in 1:(len-1) ){
to <<- c(to, attributes[i]  )
}
to
whitelist.arcs <<- data.frame(from,to)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2\\plots")
#Build a BAN by including arc from Classification Node to every other node
#runHC(debug)
#runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
View(pc2)
View(pc2)
View(pc2)
pc2 <<- pc2[ c(1:8,37,9:36) ]
View(pc2)
pc2 <<- read.arff("C:\\Users\\redhawk\\Desktop\\Thesis\\datasets\\pc2.arff") #Load the dataset
pc2.temp <<- sample(pc2) #Randomise the data
pc2 <<- pc2.temp
pc2 <<- pc2[ c(1:8,37,10:36,9) ]
View(pc2)
pc2 <<- pc2[ c(1:8,37,10:36,9) ]
View(pc2)
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2")
#sink("pc2.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
pc2 <<- read.arff("C:\\Users\\redhawk\\Desktop\\Thesis\\datasets\\pc2.arff") #Load the dataset
View(pc2)
pc2.temp <<- sample(pc2,) #Randomise the data
pc2 <<- pc2.temp
View(pc2)
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2")
sink("pc2.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
debug = TRUE
preprocess(debug)
#General Bayesian + TAN
runBN(debug)
runTAN(debug)
#General Bayesian Networks
attributes <<- names(pc2.disc.data) #Global variable
whitelist.arcs <<- NULL
#########Score Based
runHC(debug)
runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
# Include an arc from class node to every other node
len <<- length(pc2.disc.data) #Number of attributes
from <<- NULL
for( i in 1:(len-1)){
from <- c( from,c("K"))
}
from
to <<- NULL
attributes <- names(pc2.disc.data)
for(i in 1:(len-1) ){
to <<- c(to, attributes[i]  )
}
to
whitelist.arcs <<- data.frame(from,to)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2\\plots")
#Build a BAN by including arc from Classification Node to every other node
#runHC(debug)
#runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
View(pc2)
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2")
sink("pc2.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
debug = TRUE
preprocess(debug)
#General Bayesian + TAN
runBN(debug)
runTAN(debug)
#General Bayesian Networks
attributes <<- names(pc2.disc.data) #Global variable
whitelist.arcs <<- NULL
#########Score Based
runHC(debug)
runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
# Include an arc from class node to every other node
len <<- length(pc2.disc.data) #Number of attributes
from <<- NULL
for( i in 1:(len-1)){
from <- c( from,c("K"))
}
from
to <<- NULL
attributes <- names(pc2.disc.data)
for(i in 1:(len-1) ){
to <<- c(to, attributes[i]  )
}
to
whitelist.arcs <<- data.frame(from,to)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2\\plots")
#Build a BAN by including arc from Classification Node to every other node
#runHC(debug)
#runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
View(pc2.disc.data)
sink()
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2")
sink("pc2.log1.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
debug = TRUE
preprocess(debug)
#General Bayesian + TAN
runBN(debug)
runTAN(debug)
#General Bayesian Networks
attributes <<- names(pc2.disc.data) #Global variable
whitelist.arcs <<- NULL
#########Score Based
runHC(debug)
runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
# Include an arc from class node to every other node
len <<- length(pc2.disc.data) #Number of attributes
from <<- NULL
for( i in 1:(len-1)){
from <- c( from,c("K"))
}
from
to <<- NULL
attributes <- names(pc2.disc.data)
for(i in 1:(len-1) ){
to <<- c(to, attributes[i]  )
}
to
whitelist.arcs <<- data.frame(from,to)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2\\plots")
#Build a BAN by including arc from Classification Node to every other node
#runHC(debug)
#runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2")
sink("pc2.log2.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
debug = TRUE
preprocess(debug)
#General Bayesian + TAN
runBN(debug)
runTAN(debug)
#General Bayesian Networks
attributes <<- names(pc2.disc.data) #Global variable
whitelist.arcs <<- NULL
#########Score Based
runHC(debug)
runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
# Include an arc from class node to every other node
len <<- length(pc2.disc.data) #Number of attributes
from <<- NULL
for( i in 1:(len-1)){
from <- c( from,c("K"))
}
from
to <<- NULL
attributes <- names(pc2.disc.data)
for(i in 1:(len-1) ){
to <<- c(to, attributes[i]  )
}
to
whitelist.arcs <<- data.frame(from,to)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc2\\plots")
#Build a BAN by including arc from Classification Node to every other node
#runHC(debug)
#runTABU(debug)
#########Hybrid
runMMHC(debug)
runRSMAX2(debug)
runHITON(debug)
#Constraint Based
runGS(debug)
runIAMB(debug)
runMMPC(debug)
runFASTIAMB(debug)
runINTERIAMB(debug)
