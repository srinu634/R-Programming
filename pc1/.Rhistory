# whitelist.arcs = data.frame(from,to) #Arcs to be included in the graph
# #str(whitelist.arcs)
# #names(whitelist.arcs)
# pc1.fast.iamb = cextend (  fast.iamb(pc1.disc.data,whitelist = whitelist.arcs,debug=FALSE) ) # cextend :: makes sure that all edges are directed
#
# pc1.fast.iamb.fitted = bn.fit(pc1.fast.iamb,pc1.disc.data)
#
# pc1.fast.iamb.pred<- predict(pc1.fast.iamb.fitted$Defective, pc1.disc.data) #2nd parameter should be pc1.test.data
#
# table(pc1.fast.iamb.pred, pc1.disc.data[, "Defective"]) #output the prediction matrix
# #Change the outputs to numeric values;
# pc1.given.fast.iamb <- as.numeric(as.character(pc1.fast.iamb.pred))
# pc1.pred.fast.iamb <- as.numeric(as.character(pc1.disc.data[,"Defective"]))
# accuracy(f = pc1.given.fast.iamb , x = pc1.pred.fast.iamb)  #print the accuracy
#
# #graphviz.plot(pc1.fast.iamb)
#
#
#
#
#
#
# pc1.inter.iamb = empty.graph(attributes)
# whitelist.arcs = data.frame(from,to) #Arcs to be included in the graph
# #str(whitelist.arcs)
# #names(whitelist.arcs)
# pc1.inter.iamb = cextend (  inter.iamb(pc1.disc.data,whitelist = whitelist.arcs,debug=FALSE) ) # cextend :: makes sure that all edges are directed
#
# pc1.inter.iamb.fitted = bn.fit(pc1.inter.iamb,pc1.disc.data)
#
# pc1.inter.iamb.pred<- predict(pc1.inter.iamb.fitted$Defective, pc1.disc.data) #2nd parameter should be pc1.test.data
#
# table(pc1.inter.iamb.pred, pc1.disc.data[, "Defective"]) #output the prediction matrix
# #Change the outputs to numeric values;
# pc1.given.inter.iamb <- as.numeric(as.character(pc1.inter.iamb.pred))
# pc1.pred.inter.iamb <- as.numeric(as.character(pc1.disc.data[,"Defective"]))
# accuracy(f = pc1.given.inter.iamb , x = pc1.pred.inter.iamb)  #print the accuracy
#
# #graphviz.plot(pc1.inter.iamb)
#
#
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
debug = FALSE
preprocess(debug)
runBN(debug)
runTAN(debug)
#runHC(debug)
runMMHC(debug)
#runTABU(debug)
runHITON(debug)
runRSMAX2(debug)
runGS(debug)
#gs
#str(pc1.disc.data)
# Include an arc from class node to every other node
len <- length(pc1.disc.data) #Number of attributes
from <- NULL
for( i in 1:(len-1)){
from <- c( from,c("Defective"))
}
from
to <- NULL
attributes <<- names(pc1)
for(i in 1:(len-1) ){
to <- c(to, attributes[i]  )
}
# pc1.iamb = empty.graph(attributes)
# whitelist.arcs = data.frame(from,to) #Arcs to be included in the graph
# #str(whitelist.arcs)
# #names(whitelist.arcs)
# pc1.iamb = cextend (  iamb(pc1.disc.data,whitelist = whitelist.arcs,debug=FALSE) ) # cextend :: makes sure that all edges are directed
#
# pc1.iamb.fitted = bn.fit(pc1.iamb,pc1.disc.data)
#
# pc1.iamb.pred<- predict(pc1.iamb.fitted$Defective, pc1.disc.data) #2nd parameter should be pc1.test.data
#
# table(pc1.iamb.pred, pc1.disc.data[, "Defective"]) #output the prediction matrix
# #Change the outputs to numeric values;
# pc1.given.iamb <- as.numeric(as.character(pc1.iamb.pred))
# pc1.pred.iamb <- as.numeric(as.character(pc1.disc.data[,"Defective"]))
# accuracy(f = pc1.given.iamb , x = pc1.pred.iamb)  #print the accuracy
#
# #graphviz.plot(pc1.iamb)
#
#
#
#
# pc1.fast.iamb = empty.graph(attributes)
# whitelist.arcs = data.frame(from,to) #Arcs to be included in the graph
# #str(whitelist.arcs)
# #names(whitelist.arcs)
# pc1.fast.iamb = cextend (  fast.iamb(pc1.disc.data,whitelist = whitelist.arcs,debug=FALSE) ) # cextend :: makes sure that all edges are directed
#
# pc1.fast.iamb.fitted = bn.fit(pc1.fast.iamb,pc1.disc.data)
#
# pc1.fast.iamb.pred<- predict(pc1.fast.iamb.fitted$Defective, pc1.disc.data) #2nd parameter should be pc1.test.data
#
# table(pc1.fast.iamb.pred, pc1.disc.data[, "Defective"]) #output the prediction matrix
# #Change the outputs to numeric values;
# pc1.given.fast.iamb <- as.numeric(as.character(pc1.fast.iamb.pred))
# pc1.pred.fast.iamb <- as.numeric(as.character(pc1.disc.data[,"Defective"]))
# accuracy(f = pc1.given.fast.iamb , x = pc1.pred.fast.iamb)  #print the accuracy
#
# #graphviz.plot(pc1.fast.iamb)
#
#
#
#
#
#
# pc1.inter.iamb = empty.graph(attributes)
# whitelist.arcs = data.frame(from,to) #Arcs to be included in the graph
# #str(whitelist.arcs)
# #names(whitelist.arcs)
# pc1.inter.iamb = cextend (  inter.iamb(pc1.disc.data,whitelist = whitelist.arcs,debug=FALSE) ) # cextend :: makes sure that all edges are directed
#
# pc1.inter.iamb.fitted = bn.fit(pc1.inter.iamb,pc1.disc.data)
#
# pc1.inter.iamb.pred<- predict(pc1.inter.iamb.fitted$Defective, pc1.disc.data) #2nd parameter should be pc1.test.data
#
# table(pc1.inter.iamb.pred, pc1.disc.data[, "Defective"]) #output the prediction matrix
# #Change the outputs to numeric values;
# pc1.given.inter.iamb <- as.numeric(as.character(pc1.inter.iamb.pred))
# pc1.pred.inter.iamb <- as.numeric(as.character(pc1.disc.data[,"Defective"]))
# accuracy(f = pc1.given.inter.iamb , x = pc1.pred.inter.iamb)  #print the accuracy
#
# #graphviz.plot(pc1.inter.iamb)
#
#
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
sink("pc1.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
debug = FALSE
preprocess(debug)
#General Bayesian + TAN
runBN(debug)
runTAN(debug)
source("TAN.R")
runTAN(debug)
source("TAN.R")
runTAN(debug)
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
sink("pc1.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
debug = FALSE
preprocess(debug)
#General Bayesian + TAN
runBN(debug)
runTAN(debug)
sink()
pc1
pc1
pc1
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
#sink("pc1.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
debug = FALSE
preprocess(debug)
runBN(debug)
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
#sink("pc1.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
debug = FALSE
preprocess(debug)
#General Bayesian + TAN
runBN(debug)
runTAN(debug)
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
sink("pc1.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
debug = FALSE
for ( i in 1:10){
runPC1(debug)
}
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
sink("pc1.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
source("runPC1.R")
debug = FALSE
for ( i in 1:10){
runPC1(debug)
}
source("runPC1.R")
source("runPC1.R")
for ( i in 1:10){
runPC1(debug)
}
pc1 <<- read.arff("C:\\Users\\redhawk\\Desktop\\Thesis\\datasets\\pc1.arff") #Load the dataset
pc1 <- pc1[sample.int(nrow(pc1)),]
View(pc1)
pc1 <- pc1[sample.int(nrow(pc1)),]
View(pc1)
pc1.temp <<- mdlp(pc1)
pc1 <<- data.frame( pc1.temp$Disc.data )
# print(pc1)
Letters <<- c(letters,LETTERS)
colnames(pc1) <<- Letters[1:38]
pc1 <<- pc1[sample.int(nrow(pc1)),]
pc1.temp <<- mdlp(pc1)
pc1 <<- data.frame( pc1.temp$Disc.data )
# print(pc1)
Letters <<- c(letters,LETTERS)
colnames(pc1) <<- Letters[1:38]
pc1.temp$Disc.data
pc1
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
sink("pc1.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
source("runPC1.R")
debug = FALSE
for ( i in 1:10){
runPC1(debug)
}
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
sink("pc1.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
source("runPC1.R")
debug = FALSE
for ( i in 1:10){
runPC1(debug)
}
runBN = function(debug) {
if(debug) {
print("In Naive Bayes classifier"  )   #output the prediction matrix
}
#Building a Naive Bayes classifier
pc1.bn  <<- naive.bayes(pc1.disc.data, "L")
pc1.pred.bn  <<- predict(pc1.bn, pc1.test.data)  #2nd parameter should be pc1.test.data
print ( table(pc1.pred.bn,pc1.test.data[,"L"]) )  #output the prediction matrix
#Change the outputs to numeric values; Happens at two levels. 1) Change the params to characters 2) Change the characters to numeric.
pc1.given.bn  <<- as.numeric(as.character(pc1.pred.bn))
pc1.predicted.bn  <<- as.numeric(as.character(pc1.test.data[,"L"]))
print(  accuracy(f = pc1.given.bn , x = pc1.predicted.bn) ) #print the accuracy
if(debug) {
print("Done with Naive Bayes classifier"  )    #output the prediction matrix
}
png('./plots/naive_bayes.png',units="in", width=11, height=8.5, res=300)
graphviz.plot(pc1.bn)
dev.off()
}
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
sink("pc1.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
source("runPC1.R")
debug = FALSE
for ( i in 1:10){
runPC1(debug)
}
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
sink("pc1.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
source("runPC1.R")
debug = FALSE
for ( i in 1:10){
runPC1(debug,i)
}
library(infotheo)
library(foreign)
library(bnlearn)
library(discretization)
library(ROCR)
library(pROC)
library(forecast)
library(base)
setwd("C:\\Users\\redhawk\\Documents\\GitHub\\R-Programming\\pc1")
sink("pc1.log.txt")
source("preprocess.R")
source("bn.r")
source("TAN.R")
source("hc.R")
source("mmhc.R")
source("tabu.R")
source("HITON.R")
source("RSMAX2.R")
source("mmpc.R")
source("gs.R")
source("IAMB.R")
source("mmpc.R")
source("fastIAMB.R")
source("interIAMB.R")
source("runPC1.R")
debug = FALSE
for ( i in 1:10){
runPC1(debug,i)
}
